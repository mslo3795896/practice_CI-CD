{"version":3,"file":"edit-f6eb296a.js","sources":["../../../cms-frontend/src/composition/edit.js","../../../cms-frontend/src/views/Brands/manager/edit.vue"],"sourcesContent":["import { ref, reactive, toRefs, watch, computed, provide, inject, nextTick, onBeforeMount, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter, useRoute } from 'vue-router'\nimport { message } from 'ant-design-vue'\n\nexport default function edit({ api = '', defaultValue = {}, disabledCheckout = false, disableInitGetData = false, afterGetData, beforeStoreData }) {\n  const store = useStore()\n  const router = useRouter()\n  const route = useRoute()\n  const $scrollToElement = inject('$scrollToElement')\n\n  const DATA = reactive({\n    defaultValue: defaultValue,\n    params: {\n      id: '',\n    },\n    toolbar: {\n      type: 'edit',\n    },\n    formList: {},\n  })\n\n  onMounted(() => {})\n\n  watch(store.state.global.insidePage, () => {\n    const isInsidePage = store.state.global.insidePage.status\n    const insidePageId = store.state.global.insidePage.query ? store.state.global.insidePage.query.id : ''\n\n    if (isInsidePage) {\n      DATA.params.id = insidePageId\n    }\n  })\n\n  const COMPUTED = reactive({\n    forms: computed(() => {\n      const formList = []\n      /* const findNestedForm = (component) => {\n        if (component.$options._componentTag === 'el-form') {\n          formList.push(component)\n          return\n        }\n        component.$children.forEach((item) => {\n          findNestedForm(item)\n        })\n      }\n      findNestedForm(_this) */\n      return formList\n    }),\n  })\n  const METHODS = {\n    getData: async () => {\n      const data = await store.dispatch('item/fetchItem', {\n        api: api,\n        id: DATA.params.id,\n      })\n\n      DATA.defaultValue = { ...DATA.defaultValue, ...data }\n\n      METHODS.updateToolbar(data)\n\n      afterGetData && afterGetData(data)\n    },\n    validate: async ({ submit_data, btn_type }) => {\n      let failed = false\n      for (const formId in DATA.formList) {\n        const form = DATA.formList[formId]\n        if (!failed) {\n          try {\n            await form.validate()\n          } catch ({ errorFields, ...restData }) {\n            failed = true\n\n            const switchToInvalidTab = () => {\n              const findTabs = ($component) => {\n                if ($component.$parent.$.type.name === 'RouterView') return false\n\n                if ($component.$parent.$.type.name === 'Tabs') {\n                  return $component.$parent\n                } else {\n                  return findTabs($component.$parent)\n                }\n              }\n              const findInvalidTabKey = ($component) => {\n                if ($component.$parent.$.type.name === 'RouterView') return false\n\n                if ($component.$parent.$.type.name === 'ATabPane') {\n                  return $component.$parent.$.vnode.key\n                } else {\n                  return findInvalidTabKey($component.$parent)\n                }\n              }\n\n              const Tabs = findTabs(form)\n              if (Tabs) {\n                const invalidTabKey = findInvalidTabKey(form)\n                Tabs && Tabs.setActiveKey(invalidTabKey)\n              }\n            }\n            /* const scrollToInvalidFieldAndFocusField = () => {\n              nextTick(() => {\n                const $error = form.$el.querySelector('.is-error')\n                const scrollToInvalidField = () => {\n                  $scrollToElement($error, 140)\n                }\n                const findFocusableElement = () => {\n                  const formElement = 'input, select, textarea'\n                  $error.querySelector(formElement) && $error.querySelector(formElement).focus()\n                }\n\n                scrollToInvalidField()\n                findFocusableElement()\n              })\n            } */\n            const focusInvalidField = () => {\n              const $error = form.$el.querySelector('.ant-form-item-has-error')\n              const $formElement = $error.querySelector('input, select, textarea')\n\n              if ($formElement) {\n                $formElement.focus()\n                if ($formElement.className.includes('ant-calendar-picker-input'))\n                  $formElement.click()\n              }\n            }\n\n            switchToInvalidTab()\n            // scrollToInvalidFieldAndFocusField()\n            nextTick(() => {\n              form.scrollToField(errorFields[0].name, { block: 'center', behavior: 'smooth' })\n              setTimeout(() => {\n                focusInvalidField()\n              }, 300)\n            })\n          }\n        }\n      }\n\n      if (!failed) {\n        beforeStoreData && beforeStoreData()\n        METHODS.submit({ submit_data: DATA.defaultValue, btn_type })\n      }\n    },\n    submit: async ({ submit_data, btn_type }) => {\n      let submitData = Object.assign({}, submit_data)\n      const isInsidePage = store.state.global.insidePage.status\n\n      if (DATA.params.id) {\n        submitData.id = DATA.params.id\n      }\n\n      if (isInsidePage) {\n        submitData.brands = [{ id: +route.query.id }]\n      }\n\n      const data = await store.dispatch('item/store', {\n        api: api,\n        submitData,\n      })\n\n      afterGetData && afterGetData(data)\n\n      METHODS.updateToolbar(data)\n\n      METHODS.onSubmitFinish({\n        msg: '項目更新成功',\n        btn_type,\n        query: { id: data ? data.id : submit_data.id },\n      })\n    },\n    onSubmitFinish: ({ msg, btn_type, query }) => {\n      const { status: isInsidePage, pageGroupId = undefined, pageId = undefined } = store.state.global.insidePage\n\n      message.success(msg)\n      switch (btn_type) {\n        case 'save':\n          if (isInsidePage) {\n            store.dispatch('global/setInsidePage', {\n              status: 'edit',\n              query,\n              pageGroupId,\n              pageId,\n            })\n          } else {\n            router.push({\n              path: route.path,\n              query,\n            })\n          }\n\n          break\n        case 'savenadd':\n          //Checkout\n          /* if (this.checkRouteNeedCheckout(route.path) && query.id) {\n            this.handleCheckout(query.id);\n          } */\n\n          if (query.id) {\n            METHODS.checkout(query.id)\n          }\n\n          if (isInsidePage) {\n            store.dispatch('global/setInsidePage', {\n              status: 'add',\n              pageGroupId,\n              pageId,\n            })\n          } else {\n            router.push({\n              path: route.path,\n            })\n            router.go(0)\n          }\n\n          break\n        case 'savenclose':\n          //Checkout\n          METHODS.onCancel(query.id)\n          break\n      }\n    },\n    onCancel: async (checkout_id = '') => {\n      const { status: isInsidePage, pageGroupId = undefined, pageId = undefined } = store.state.global.insidePage\n\n      /* if (this.checkRouteNeedCheckout(route.path) && checkout_id) {\n          this.handleCheckout(checkout_id);\n      } */\n\n      if (checkout_id && !disabledCheckout) {\n        await METHODS.checkout(checkout_id)\n      }\n\n      if (isInsidePage) {\n        store.dispatch('global/setInsidePage', {\n          status: 'list',\n          pageGroupId,\n          pageId,\n        })\n      } else {\n        router.push({\n          path: route.path.replace('/edit', ''),\n          query: route.query.from,\n        })\n      }\n    },\n    checkout: async (id) => {\n      await store.dispatch('item/checkout', {\n        api: api,\n        ids: [id],\n      })\n    },\n    trash: async (id) => {\n      await METHODS.updateState(id, -2)\n      message.success('回收成功')\n    },\n    restore: async (id) => {\n      await METHODS.updateState(id, 1)\n      message.success('恢復成功')\n    },\n    updateState: async (id, state) => {\n      await store.dispatch('item/updateState', {\n        api: api,\n        ids: [id],\n        state,\n      })\n      METHODS.getData()\n    },\n    delete: async (id) => {\n      await store.dispatch('item/remove', { api: api, ids: [id] })\n      message.success('刪除成功')\n      METHODS.onCancel()\n    },\n    updateToolbar: (data) => {\n      if (!!data === false) return\n\n      if (['trash-edit', 'edit'].includes(DATA.toolbar.type)) DATA.toolbar.type = data.state === -2 ? 'trash-edit' : 'edit'\n\n      METHODS.initToolbar(DATA.toolbar)\n    },\n    updateParams: () => {\n      const id = () => {\n        const isInsidePage = store.state.global.insidePage.status\n\n        if (isInsidePage) {\n          const insidePageId = store.state.global.insidePage.query ? store.state.global.insidePage.query.id : ''\n\n          return Number(insidePageId) || ''\n        } else {\n          return Number(route.query.id) || ''\n        }\n      }\n\n      DATA.params.id = id()\n      if (['edit', 'add'].includes(DATA.toolbar.type)) DATA.toolbar.type = DATA.params.id ? 'edit' : 'add'\n    },\n    initData: () => {\n      METHODS.updateParams()\n\n      if (DATA.params.id && !disableInitGetData) {\n        METHODS.getData()\n      }\n    },\n    addForm: (form, keyName) => {\n      DATA.formList[keyName] = form\n    },\n    deleteForm: (keyName) => {\n      delete DATA.formList[keyName]\n    },\n  }\n\n  METHODS.initData()\n  provide('addForm', METHODS.addForm)\n  provide('deleteForm', METHODS.deleteForm)\n\n  return {\n    ...toRefs(DATA),\n    // ...COMPUTED,\n    ...METHODS,\n  }\n}\n\nexport const temp = {\n  data() {\n    return {\n      params: {\n        id: '',\n        pid: '',\n      },\n      toolbar: {\n        type: 'edit',\n      },\n      disabledCheckout: false,\n      disableInitGetData: false,\n    }\n  },\n  provide() {\n    return {\n      api: this.api,\n    }\n  },\n  watch: {\n    $route: {\n      immediate: true,\n      handler: 'initData',\n    },\n    '$store.state.global.insidePage': {\n      handler(val) {\n        const isInsidePage = this.$store.state.global.insidePage.status\n        const insidePageId = this.$store.state.global.insidePage.query ? this.$store.state.global.insidePage.query.id : ''\n\n        if (isInsidePage) {\n          this.params.id = insidePageId\n        }\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  computed: {\n    forms() {\n      const formList = []\n      const findNestedForm = (component) => {\n        if (component.$options._componentTag === 'el-form') {\n          formList.push(component)\n          return\n        }\n        component.$children.forEach((item) => {\n          findNestedForm(item)\n        })\n      }\n      findNestedForm(this)\n      return formList\n    },\n  },\n  methods: {\n    async $_editMixin_getData() {\n      const data = await this.$store.dispatch('item/fetchItem', {\n        api: this.api,\n        id: this.params.id,\n      })\n\n      this.defaultValue = { ...this.defaultValue, ...data }\n\n      this.$_editMixin_updateToolbar(data)\n\n      this.afterGetData && this.afterGetData(data)\n    },\n    async $_editMixin_validate({ submit_data, btn_type }) {\n      let failed = false\n      for (const form of this.forms) {\n        if (!failed) {\n          try {\n            await form.validate()\n          } catch (e) {\n            failed = true\n            const switchToInvalidTab = () => {\n              if (form.$parent.$options._componentTag === 'el-tab-pane') {\n                const tabIndex = form.$parent.name || form.$parent.index\n                form.$parent.$parent.currentName = tabIndex\n              }\n            }\n            const scrollToInvalidFieldAndFocusField = () => {\n              this.$nextTick(() => {\n                const $error = form.$el.querySelector('.is-error')\n                const scrollToInvalidField = () => {\n                  this.$scrollToElement($error, 140)\n                }\n                const findFocusableElement = () => {\n                  const formElement = 'input, select, textarea'\n                  $error.querySelector(formElement) && $error.querySelector(formElement).focus()\n                }\n\n                scrollToInvalidField()\n                findFocusableElement()\n              })\n            }\n\n            switchToInvalidTab()\n            scrollToInvalidFieldAndFocusField()\n          }\n        }\n      }\n      /* this.forms.forEach(async (form) => {\n        try {\n          await form.validate()\n        } catch(e) {\n          if (form.$parent.$options._componentTag === 'el-tab-pane') {\n            const tabIndex = form.$parent.index\n            form.$parent.$parent.currentName = tabIndex\n          }\n        }\n      }) */\n      if (!failed) {\n        this.beforeStoreData && this.beforeStoreData()\n        this.$_editMixin_submit({ submit_data: this.defaultValue, btn_type })\n      }\n\n      // this.$_editMixin_submit({ submit_data, btn_type })\n    },\n    async $_editMixin_submit({ submit_data, btn_type }) {\n      let submitData = Object.assign({}, submit_data)\n      const isInsidePage = this.$store.state.global.insidePage.status\n\n      if (this.params.id) {\n        submitData.id = this.params.id\n      }\n\n      if (isInsidePage) {\n        submitData.brands = [{ id: +this.$route.query.id }]\n      }\n\n      const data = await this.$store.dispatch('item/store', {\n        api: this.api,\n        submitData,\n      })\n\n      this.afterGetData && this.afterGetData(data)\n\n      this.$_editMixin_updateToolbar(data)\n\n      this.$_editMixin_onSubmitFinish({\n        msg: '項目更新成功',\n        btn_type,\n        query: { id: data ? data.id : submit_data.id },\n      })\n    },\n    $_editMixin_onSubmitFinish({ msg, btn_type, query }) {\n      const { status: isInsidePage, pageGroupId = undefined, pageId = undefined } = this.$store.state.global.insidePage\n\n      this.$message.success(msg)\n      switch (btn_type) {\n        case 'save':\n          if (isInsidePage) {\n            this.$store.dispatch('global/setInsidePage', {\n              status: 'edit',\n              query,\n              pageGroupId,\n              pageId,\n            })\n          } else {\n            this.$router.push({\n              path: this.$route.path,\n              query,\n            })\n          }\n\n          break\n        case 'savenadd':\n          //Checkout\n          /* if (this.checkRouteNeedCheckout(this.$route.path) && query.id) {\n            this.handleCheckout(query.id);\n          } */\n\n          if (query.id) {\n            this.$_editMixin_checkout(query.id)\n          }\n\n          if (isInsidePage) {\n            this.$store.dispatch('global/setInsidePage', {\n              status: 'add',\n              pageGroupId,\n              pageId,\n            })\n          } else {\n            this.$router.push({\n              path: this.$route.path,\n            })\n            this.$router.go(0)\n          }\n\n          break\n        case 'savenclose':\n          //Checkout\n          this.$_editMixin_onCancel(query.id)\n          break\n      }\n    },\n    async $_editMixin_onCancel(checkout_id = '') {\n      const { status: isInsidePage, pageGroupId = undefined, pageId = undefined } = this.$store.state.global.insidePage\n\n      /* if (this.checkRouteNeedCheckout(this.$route.path) && checkout_id) {\n          this.handleCheckout(checkout_id);\n      } */\n\n      if (checkout_id && !this.disabledCheckout) {\n        await this.$_editMixin_checkout(checkout_id)\n      }\n\n      if (isInsidePage) {\n        this.$store.dispatch('global/setInsidePage', {\n          status: 'list',\n          pageGroupId,\n          pageId,\n        })\n      } else {\n        this.$router.push({\n          path: this.$route.path.replace('/edit', ''),\n          query: this.$route.query.from,\n        })\n      }\n    },\n    async $_editMixin_checkout(id) {\n      await this.$store.dispatch('item/checkout', {\n        api: this.api,\n        ids: [id],\n      })\n    },\n    async $_editMixin_trash(id) {\n      await this.$_editMixin_updateState(id, -2)\n      this.$message.success('回收成功')\n    },\n    async $_editMixin_restore(id) {\n      await this.$_editMixin_updateState(id, 1)\n      this.$message.success('恢復成功')\n    },\n    async $_editMixin_updateState(id, state) {\n      await this.$store.dispatch('item/updateState', {\n        api: this.api,\n        ids: [id],\n        state,\n      })\n      this.$_editMixin_getData()\n    },\n    async $_editMixin_delete(id) {\n      await this.$store.dispatch('item/remove', { api: this.api, ids: [id] })\n      this.$message.success('刪除成功')\n      this.$_editMixin_onCancel()\n    },\n    $_editMixin_updateToolbar(data) {\n      if (!!data === false) return\n\n      if (['trash-edit', 'edit'].includes(this.toolbar.type)) this.$set(this.toolbar, 'type', data.state === -2 ? 'trash-edit' : 'edit')\n\n      this.initToolbar(this.toolbar)\n    },\n    /* checkRouteNeedCheckout(route) {\n        const checkoutArray = [\"item\", \"category\", \"menu\", \"site\"];\n        for (let path of checkoutArray) {\n            if (route.includes(path)) {\n                return true;\n                break;\n            }\n        }\n    }, */\n    updateParams() {\n      const id = () => {\n        const isInsidePage = this.$store.state.global.insidePage.status\n\n        if (isInsidePage) {\n          const insidePageId = this.$store.state.global.insidePage.query ? this.$store.state.global.insidePage.query.id : ''\n\n          return Number(insidePageId) || ''\n        } else {\n          return Number(this.$route.query.id) || ''\n        }\n      }\n\n      this.params.id = id()\n      this.params.pid = Number(this.$route.query.pid) || 1\n      if (['edit', 'add'].includes(this.toolbar.type)) this.$set(this.toolbar, 'type', this.params.id ? 'edit' : 'add')\n    },\n    initData() {\n      this.updateParams()\n\n      if (this.params.id && !this.disableInitGetData) {\n        this.$_editMixin_getData()\n      }\n    },\n  },\n}\n","<script>\nimport { defineAsyncComponent, ref, reactive, nextTick, onMounted, onBeforeMount, toRaw } from 'vue'\nimport useEdit from '@composition/edit'\n\nexport default {\n  setup(props) {\n    const submitData = reactive({\n      text: '',\n      title: '',\n      date: '',\n    })\n\n    const EDIT = useEdit({\n      api: 'brand',\n      defaultValue: submitData,\n    })\n\n    return {\n      submitData,\n      ...EDIT,\n    }\n  },\n  components: {\n    Layout: defineAsyncComponent(() => import('@layout/main.vue')),\n    // FormQuick: () => import(\"@components/Form/FormQuick.vue\"),\n  },\n  data() {\n    return {\n      activeKey: '1',\n    }\n  },\n  computed: {},\n}\n</script>\n<template>\n  <Layout\n    >EDIT\n    <a-button @click=\"validate\">SUBMIT</a-button>\n\n    <div v-for=\"i in 50\">...</div>\n    <a-tabs v-model:activeKey=\"activeKey\">\n      <a-tab-pane key=\"1\" tab=\"Tab 1\">\n        <BaseForm :model=\"submitData\">\n          <a-form-item label=\"Activity name\" name=\"text\" required>\n            <a-input v-model:value=\"submitData.text\"></a-input>\n          </a-form-item>\n          <a-form-item label=\"Date\" name=\"date\" required>\n        <a-date-picker v-model:value=\"submitData.date\" :valueFormat=\"'YYYY-MM-DD'\"/>\n      </a-form-item>\n        </BaseForm>\n      </a-tab-pane>\n      <a-tab-pane key=\"2\" tab=\"Tab 2\" forceRender>\n        <BaseForm :model=\"submitData\">\n          <a-form-item label=\"title\" name=\"title\" required>\n            <a-input v-model:value=\"submitData.title\"></a-input>\n          </a-form-item>\n        </BaseForm>\n      </a-tab-pane>\n      <a-tab-pane key=\"3\" tab=\"Tab 3\">Content of Tab Pane 3</a-tab-pane>\n    </a-tabs>\n    <div v-for=\"i in 50\">...</div>\n  </Layout>\n</template>\n"],"names":["useEdit"],"mappings":"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"}